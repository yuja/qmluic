// SPDX-License-Identifier: GPL-2.0-or-later
// derived from
// https://foss.heptapod.net/mercurial/tortoisehg/thg/-/blob/6.1.2/tortoisehg/hgqt/hgemail.ui

import qmluic.QtWidgets

QDialog {
    geometry { width: 660; height: 520 }
    windowTitle: qsTr("Email")
    sizeGripEnabled: true

    QVBoxLayout {
        QTabWidget {
            id: mainTabs

            currentIndex: 0
            documentMode: false
            tabsClosable: false
            movable: false

            QWidget {
                id: editTab
                QTabWidget.title: qsTr("Edit")

                QGridLayout {
                    columns: 2

                    QGroupBox {
                        id: envelopeBox
                        //title: ""

                        QFormLayout {
                            fieldGrowthPolicy: QFormLayout.ExpandingFieldsGrow

                            QLabel { text: qsTr("To:"); buddy: toEdit }
                            QComboBox {
                                id: toEdit
                                sizePolicy.horizontalPolicy: QSizePolicy.Expanding
                                sizePolicy.verticalPolicy: QSizePolicy.Fixed
                                editable: true
                                insertPolicy: QComboBox.InsertAtTop
                            }

                            QLabel { text: qsTr("Cc:"); buddy: ccEdit }
                            QComboBox {
                                id: ccEdit
                                sizePolicy.horizontalPolicy: QSizePolicy.Expanding
                                sizePolicy.verticalPolicy: QSizePolicy.Fixed
                                editable: true
                                insertPolicy: QComboBox.InsertAtTop
                            }

                            QLabel { text: qsTr("From:"); buddy: fromEdit }
                            QComboBox {
                                id: fromEdit
                                sizePolicy.horizontalPolicy: QSizePolicy.Expanding
                                sizePolicy.verticalPolicy: QSizePolicy.Fixed
                                editable: true
                                insertPolicy: QComboBox.InsertAtTop
                            }

                            QLabel { text: qsTr("In-Reply-To:"); buddy: inReplyToEdit }
                            QLineEdit {
                                id: inReplyToEdit
                                toolTip: qsTr("Message identifier to reply to, for threading")
                            }

                            QLabel { text: qsTr("Flag:"); buddy: flagEdit }
                            QComboBox {
                                id: flagEdit
                                sizePolicy.horizontalPolicy: QSizePolicy.Expanding
                                sizePolicy.verticalPolicy: QSizePolicy.Fixed
                                editable: true
                                insertPolicy: QComboBox.InsertAtTop
                            }
                        }
                    }

                    QGroupBox {
                        id: optionsEdit
                        sizePolicy.horizontalPolicy: QSizePolicy.Maximum
                        sizePolicy.verticalPolicy: QSizePolicy.Preferred
                        //title: ""

                        QVBoxLayout {
                            QFrame {
                                id: patchFrame
                                frameShape: QFrame.NoFrame
                                frameShadow: QFrame.Raised

                                QVBoxLayout {
                                    QRadioButton {
                                        id: hgPatchRadio
                                        text: qsTr("Send changesets as Hg patches")
                                        whatsThis: qsTr(
                                            "Hg patches (as generated by export command) are " +
                                            "compatible with most patch programs. They include " +
                                            "a header which contains the most important " +
                                            "changeset metadata.")
                                    }

                                    QRadioButton {
                                        id: gitPatchRadio
                                        text: qsTr("Use extended (git) patch format")
                                        whatsThis: qsTr(
                                            "Git patches can describe binary files, copies, " +
                                            "and permission changes, but recipients may not be " +
                                            "able to use them if they are not using git or " +
                                            "Mercurial.")
                                    }

                                    QRadioButton {
                                        id: plainPatchRadio
                                        text: qsTr("Plain, do not prepend Hg header")
                                        whatsThis: qsTr(
                                            "Stripping Mercurial header removes username and " +
                                            "parent information.  Only useful if recipient is " +
                                            "not using Mercurial (and does not like to see " +
                                            "the headers).")
                                    }

                                    QRadioButton {
                                        id: bundleRadio
                                        text: qsTr("Send single binary bundle, not patches")
                                        whatsThis: qsTr(
                                            "Bundles store complete changesets in binary form. " +
                                            "Upstream users can pull from them. This is " +
                                            "the safest way to send changes to recipient " +
                                            "Mercurial users.")
                                        onClicked: writeIntroCheck.checked = true
                                    }
                                }
                            }

                            QFrame {
                                id: extraFrame
                                frameShape: QFrame.NoFrame
                                frameShadow: QFrame.Raised

                                QHBoxLayout {
                                    QCheckBox {
                                        id: bodyCheck
                                        checked: true
                                        text: qsTr("body")
                                        toolTip: qsTr("Send patches as part of the email body")
                                    }

                                    QCheckBox {
                                        id: attachCheck
                                        text: qsTr("attach")
                                        toolTip: qsTr("Send patches as attachments")
                                    }

                                    QCheckBox {
                                        id: inlineCheck
                                        text: qsTr("inline")
                                        toolTip: qsTr("Send patches as inline attachments")
                                    }

                                    QCheckBox {
                                        id: diffstatCheck
                                        text: qsTr("diffstat")
                                        toolTip: qsTr("Add diffstat output to messages")
                                    }

                                    QSpacerItem {
                                        orientation: Qt.Horizontal
                                        //sizeHint { width: 40; height: 20 }
                                    }
                                }
                            }
                        }
                    }

                    QCheckBox {
                        id: writeIntroCheck
                        QLayout.row: 1
                        QLayout.columnSpan: 2
                        enabled: !bundleRadio.checked
                        text: qsTr("Write patch series (bundle) description")
                        whatsThis: qsTr(
                            "Patch series description is sent in initial summary email with " +
                            "[PATCH 0 of N] subject.  It should describe the effects of " +
                            "the entire patch series.  When emailing a bundle, these fields " +
                            "make up the message subject and body. Flags is a comma separated " +
                            "list of tags which are inserted into the message subject prefix.")
                        onClicked: {
                            if (writeIntroCheck.checked) { // TODO: implicit this
                                subjectEdit.setFocus();
                                subjectEdit.selectAll();
                            }
                        }
                    }

                    QSplitter {
                        QLayout.row: 2
                        QLayout.columnSpan: 2
                        orientation: Qt.Vertical

                        QGroupBox {
                            id: introBox
                            visible: writeIntroCheck.checked || bundleRadio.checked
                            //title: ""

                            QVBoxLayout {
                                QHBoxLayout {
                                    QLabel { text: qsTr("Subject:"); buddy: subjectEdit }
                                    QLineEdit {  // TODO: was QComboBox
                                        id: subjectEdit
                                        sizePolicy.horizontalPolicy: QSizePolicy.Expanding
                                        sizePolicy.verticalPolicy: QSizePolicy.Fixed
                                        // editable: true
                                        // insertPolicy: QComboBox.InsertAtTop
                                    }
                                }

                                QPlainTextEdit {
                                    font.family: "Monospace"
                                }
                            }
                        }

                        QGroupBox {
                            id: changesetsBox
                            title: qsTr("Changesets")

                            QVBoxLayout {
                                QTreeView {
                                    id: changesetsView
                                    indentation: 0
                                    rootIsDecorated: false
                                    itemsExpandable: false
                                }

                                QHBoxLayout {
                                    QPushButton {
                                        id: selectAllButton
                                        text: qsTr("Select &All")
                                    }

                                    QPushButton {
                                        id: selectNoneButton
                                        text: qsTr("Select &None")
                                    }

                                    QSpacerItem {
                                        orientation: Qt.Horizontal
                                        //sizeHint { width: 40; height: 20 }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            QWidget {
                id: previewTab
                QTabWidget.title: qsTr("Preview")

                QGridLayout {
                    // TODO: <widget class="QsciScintilla" name="preview_edit"/>
                    QPlainTextEdit { id: previewEdit }
                }
            }
        }

        QHBoxLayout {
            QPushButton {
                id: settingButton
                default_: false
                text: qsTr("&Settings")
                toolTip: qsTr("Configure email settings")
            }

            QSpacerItem {
                orientation: Qt.Horizontal
                //sizeHint { width: 25; height: 19 }
            }

            QPushButton {
                id: sendButton
                default_: false
                enabled: false
                text: qsTr("Send &Email")
            }

            QPushButton {
                id: closeButton
                default_: true
                text: qsTr("&Close")
            }
        }
    }
}

// TODO:
// <customwidgets>
//  <customwidget>
//   <class>QsciScintilla</class>
//   <extends>QFrame</extends>
//   <header>Qsci/qsciscintilla.h</header>
//   <container>1</container>
//  </customwidget>
// </customwidgets>

// TODO: tabstops
