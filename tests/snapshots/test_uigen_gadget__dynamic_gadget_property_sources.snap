---
source: tests/test_uigen_gadget.rs
expression: ui_support_h
---
#pragma once
#include "ui_mytype.h"

namespace UiSupport {
class MyType
{
public:
    MyType(QLabel *root, Ui::MyType *ui): root_(root), ui_(ui) {}

    void setup()
    {
        this->setupLabelFont();
        this->updateLabelFont();
    }

private:
    enum class BindingIndex : unsigned {
        LabelFont,
    };

    void setupLabelFont()
    {
        QObject::connect(this->ui_->check, &QAbstractButton::toggled, this->root_, [this]() { this->updateLabelFont(); });
    }

    void updateLabelFont()
    {
#ifndef QT_NO_DEBUG
        constexpr unsigned index = static_cast<unsigned>(BindingIndex::LabelFont);
        Q_ASSERT_X(!(this->bindingGuard_[index >> 5] & (1U << (index & 0x1f))), __func__, "binding loop detected");
        this->bindingGuard_[index >> 5] |= (1U << (index & 0x1f));
#endif
        this->root_->setFont(this->evalLabelFont(this->root_->font()));
#ifndef QT_NO_DEBUG
        this->bindingGuard_[index >> 5] &= ~(1U << (index & 0x1f));
#endif
    }

    QFont evalLabelFont(QFont a)
    {
        a.setFamily(this->evalLabelFontFamily());
        a.setPointSize(this->evalLabelFontPointSize());
        return a;
    }

    QString evalLabelFontFamily()
    {
        auto &observed = observedLabelFontFamily_;
        const auto update = [this]() { this->updateLabelFont(); };
        bool a0;
        QLineEdit* a1;
        QString a2;
    b0:
        a0 = this->ui_->check->isChecked();
        if (a0)
            goto b1;
        else
            goto b2;
    b1:
        a1 = this->ui_->family1Edit;
        goto b3;
    b2:
        a1 = this->ui_->family2Edit;
        goto b3;
    b3:
        if (Q_UNLIKELY(!observed[0].connection || observed[0].object != a1)) {
            QObject::disconnect(observed[0].connection);
            observed[0].connection = QObject::connect(a1, &QLineEdit::textChanged, this->root_, update);
            observed[0].object = a1;
        }
        a2 = a1->text();
        return a2;
    }

    int evalLabelFontPointSize()
    {
        auto &observed = observedLabelFontPointSize_;
        const auto update = [this]() { this->updateLabelFont(); };
        bool a0;
        QSpinBox* a1;
        int a2;
    b0:
        a0 = this->ui_->check->isChecked();
        if (a0)
            goto b1;
        else
            goto b2;
    b1:
        a1 = this->ui_->size1Edit;
        goto b3;
    b2:
        a1 = this->ui_->size2Edit;
        goto b3;
    b3:
        if (Q_UNLIKELY(!observed[0].connection || observed[0].object != a1)) {
            QObject::disconnect(observed[0].connection);
            observed[0].connection = QObject::connect(a1, &QSpinBox::valueChanged, this->root_, update);
            observed[0].object = a1;
        }
        a2 = a1->value();
        return a2;
    }

    struct PropertyObserver
    {
        QMetaObject::Connection connection;
        QObject *object = nullptr;
    };

    QLabel *const root_;
    Ui::MyType *const ui_;
    PropertyObserver observedLabelFontFamily_[1];
    PropertyObserver observedLabelFontPointSize_[1];
#ifndef QT_NO_DEBUG
    quint32 bindingGuard_[1] = {0};
#endif

};
} // namespace UiSupport

