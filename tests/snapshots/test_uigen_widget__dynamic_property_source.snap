---
source: tests/test_uigen_widget.rs
expression: ui_support_h
---
#pragma once
#include "ui_mytype.h"

namespace UiSupport {
class MyType
{
public:
    MyType(QWidget *root, Ui::MyType *ui): root_(root), ui_(ui) {}

    void setup()
    {
        this->setupWidgetWindowTitle();
        this->updateWidgetWindowTitle();
    }

private:
    enum class BindingIndex : unsigned {
        WidgetWindowTitle,
    };

    void setupWidgetWindowTitle()
    {
        QObject::connect(this->ui_->source, &QAbstractButton::toggled, this->root_, [this]() { this->updateWidgetWindowTitle(); });
    }

    void updateWidgetWindowTitle()
    {
#ifndef QT_NO_DEBUG
        constexpr unsigned index = static_cast<unsigned>(BindingIndex::WidgetWindowTitle);
        Q_ASSERT_X(!(this->bindingGuard_[index >> 5] & (1U << (index & 0x1f))), __func__, "binding loop detected");
        this->bindingGuard_[index >> 5] |= (1U << (index & 0x1f));
#endif
        this->root_->setWindowTitle(this->evalWidgetWindowTitle());
#ifndef QT_NO_DEBUG
        this->bindingGuard_[index >> 5] &= ~(1U << (index & 0x1f));
#endif
    }

    QString evalWidgetWindowTitle()
    {
        auto &observed = observedWidgetWindowTitle_;
        const auto update = [this]() { this->updateWidgetWindowTitle(); };
        bool a0;
        QLineEdit* a1;
        QString a2;
    b0:
        a0 = this->ui_->source->isChecked();
        if (a0)
            goto b1;
        else
            goto b2;
    b1:
        a1 = this->ui_->edit1;
        goto b3;
    b2:
        a1 = this->ui_->edit2;
        goto b3;
    b3:
        if (Q_UNLIKELY(!observed[0].connection || observed[0].object != a1)) {
            QObject::disconnect(observed[0].connection);
            observed[0].connection = QObject::connect(a1, &QLineEdit::textChanged, this->root_, update);
            observed[0].object = a1;
        }
        a2 = a1->text();
        return a2;
    }

    struct PropertyObserver
    {
        QMetaObject::Connection connection;
        QObject *object = nullptr;
    };

    QWidget *const root_;
    Ui::MyType *const ui_;
    PropertyObserver observedWidgetWindowTitle_[1];
#ifndef QT_NO_DEBUG
    quint32 bindingGuard_[1] = {0};
#endif

};
} // namespace UiSupport

